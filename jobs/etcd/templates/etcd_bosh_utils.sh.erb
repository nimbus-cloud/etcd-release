LOG_DIR=/var/vcap/sys/log/etcd

# /var/vcap/store will be persistent disk if one exists, but defaults to system disk if no persistent disk is configured.
STORE_DIR=/var/vcap/store
DATA_DIR=${STORE_DIR}/etcd

<%
  def discover_external_ip
    networks = spec.networks.marshal_dump

    _, network = networks.find do |_name, network_spec|
      network_spec.default
    end

    if !network
      _, network = networks.first
    end

    if !network
      raise "Could not determine IP via network spec: #{networks}"
    end

    network.ip
  end

  def node_name
    "#{name.gsub('_', '-')}-#{p("diego.zone")}-#{spec.index}"
  end

  def peer_protocol
    p("etcd.peer_require_ssl") ? "https" : "http"
  end

  def client_protocol
    p("etcd.require_ssl") ? "https" : "http"
  end

  def advertise_peer_url
    if p("etcd.require_ssl") || p("etcd.peer_require_ssl")
      "#{peer_protocol}://#{node_name}.#{p("etcd.advertise_urls_dns_suffix")}:7001"
    else
      my_ip = discover_external_ip
      "http://#{my_ip}:7001"
    end
  end

  def advertise_client_url
    if p("etcd.require_ssl") || p("etcd.peer_require_ssl")
      "#{client_protocol}://#{node_name}.#{p("etcd.advertise_urls_dns_suffix")}:4001"
    else
      my_ip = discover_external_ip
      "http://#{my_ip}:4001"
    end
  end

  def cluster_member_ips
    ips = nil
    if_p("etcd.machines") { |machines| ips = machines.map { |m| "http://#{m}:4001" } }
    unless ips
      ips = link("etcd").instances.map { |i| "http://#{i.address}:4001" }
    end
    ips
  end

  def cluster_members
    if p("etcd.require_ssl") || p("etcd.peer_require_ssl")
      cluster_url = "#{client_protocol}://#{p("etcd.advertise_urls_dns_suffix")}:4001"
      return cluster_url
    else
      cluster_member_ips.join(" ")
    end
  end

  def consistency_checker_cluster_members
    if p("etcd.require_ssl") || p("etcd.peer_require_ssl")
      cluster_member_urls = nil
      if_link("etcd") do |etcd_link|
        urls = []
        etcd_link.instances.size.times do |i|
          urls << "#{client_protocol}://#{name.gsub('_', '-')}-#{i}.#{p("etcd.advertise_urls_dns_suffix")}:4001"
        end
        cluster_member_urls = urls.flatten.join(",")
      end
      unless cluster_member_urls
        cluster_member_urls = p("etcd.cluster").map do |zone|
          result = []
          for i in 0..zone["instances"]-1
            result << "#{client_protocol}://#{zone["name"].gsub('_', '-')}-#{p("diego.zone")}-#{i}.#{p("etcd.advertise_urls_dns_suffix")}:4001"
          end
          result
        end.flatten.join(",")
      end
      return cluster_member_urls
    else
      cluster_member_ips.flatten.join(",")
    end
  end
%>

node_name="<%= node_name %>"
listen_peer_url="<%= "#{peer_protocol}://#{p("etcd.peer_ip")}:7001" %>"
listen_client_url="<%= "#{client_protocol}://#{p("etcd.client_ip")}:4001" %>"
advertise_peer_url="<%= advertise_peer_url %>"
advertise_client_url="<%= advertise_client_url %>"
this_node="${node_name}=${advertise_peer_url}"
consistency_checker_cluster_members="<%= consistency_checker_cluster_members %>"

<% if p("etcd.require_ssl") || p("etcd.peer_require_ssl") %>
CERT_DIR=/var/vcap/jobs/etcd/config/certs
<% end %>

<% if p("etcd.require_ssl") %>
ca_cert_file=${CERT_DIR}/server-ca.crt
server_cert_file=${CERT_DIR}/server.crt
server_key_file=${CERT_DIR}/server.key
client_cert_file=${CERT_DIR}/client.crt
client_key_file=${CERT_DIR}/client.key

etcdctl_sec_flags=" \
  -ca-file=${ca_cert_file} \
  -cert-file=${client_cert_file} \
  -key-file=${client_key_file}"
etcd_sec_flags=" \
  --client-cert-auth \
  --trusted-ca-file ${ca_cert_file} \
  --cert-file ${server_cert_file} \
  --key-file ${server_key_file}"
<% else %>
etcdctl_sec_flags=""
etcd_sec_flags=""
<% end %>

<% if p("etcd.peer_require_ssl") %>
peer_ca_cert_file=${CERT_DIR}/peer-ca.crt
peer_cert_file=${CERT_DIR}/peer.crt
peer_key_file=${CERT_DIR}/peer.key

etcd_peer_sec_flags=" \
  --peer-client-cert-auth \
  --peer-trusted-ca-file ${peer_ca_cert_file} \
  --peer-cert-file ${peer_cert_file} \
  --peer-key-file ${peer_key_file}"

etcd_sec_flags="${etcd_sec_flags} ${etcd_peer_sec_flags}"
<% end %>

create_cert_files() {
  true
  set +x
  <% if p("etcd.require_ssl") %>
  echo -n '<%= p("etcd.ca_cert") %>' > ${ca_cert_file}
  echo -n '<%= p("etcd.server_cert") %>' > ${server_cert_file}
  echo -n '<%= p("etcd.server_key") %>' > ${server_key_file}
  echo -n '<%= p("etcd.client_cert") %>' > ${client_cert_file}
  echo -n '<%= p("etcd.client_key") %>' > ${client_key_file}
  <% end %>

  <% if p("etcd.peer_require_ssl") %>
  echo -n '<%= p("etcd.peer_ca_cert") %>' > ${peer_ca_cert_file}
  echo -n '<%= p("etcd.peer_cert") %>' > ${peer_cert_file}
  echo -n '<%= p("etcd.peer_key") %>' > ${peer_key_file}
  <% end %>

  <% if p("etcd.require_ssl") || p("etcd.peer_require_ssl") %>
  chown vcap:vcap ${CERT_DIR}/*.{crt,key}
  chmod 640 ${CERT_DIR}/*.{crt,key}
  <% end %>
  set -x
}

member_list() {
  for cluster_member in <%= cluster_members %>
  do
    set +e
    /var/vcap/packages/etcd/etcdctl ${etcdctl_sec_flags} -debug -C "${cluster_member}" member list
    local exitstatus=$?
    set -e
    if [ $exitstatus -eq 0 ]; then
      return
    fi
  done
}

member_remove() {
  for cluster_member in <%= cluster_members %>
  do
    set +e
    /var/vcap/packages/etcd/etcdctl ${etcdctl_sec_flags} -debug -C "${cluster_member}" member remove $1
    local exitstatus=$?
    set -e
    if [ $exitstatus -eq 0 ]; then
      return
    fi
  done
}

member_add() {
  for cluster_member in <%= cluster_members %>
  do
    set +e
    /var/vcap/packages/etcd/etcdctl ${etcdctl_sec_flags} -debug -C "${cluster_member}" member add ${node_name} ${advertise_peer_url}
    local exitstatus=$?
    set -e
    if [ $exitstatus -eq 0 ]; then
      return
    fi
  done
}

extract_cluster_from_member_list() {
  members_with_names=$(echo "$1" | grep 'name=' | grep -v 'name= ' | sed 's/\[.*\]//')
  name_peerURL_pairs=$(echo "$members_with_names" | sed 's/.*name=//' | sed 's/ clientURLs.*//' | sed 's/ peerURLs//')
  echo "$name_peerURL_pairs" | tr -s "\n" "," | sed 's/,$//'
}

extract_my_id() {
  echo "$1" | grep ${advertise_peer_url} | sed 's/:.*//' | sed 's/\[.*\]//'
}

safe_teardown() {
  if prior_cluster_had_other_nodes "$1"; then
    my_id=$(extract_my_id "$1")
    if [ ! -z "$my_id" ]; then
      member_remove ${my_id}
    fi
    rm -rf ${DATA_DIR}/*
  fi
}

prior_cluster_had_other_nodes() {
  [ "$( wc -l <<< "$1" )" -ne 1 ] || ! grep ${advertise_peer_url} <<< "$1"
}
